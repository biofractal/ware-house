// Generated by CoffeeScript 1.9.0
(function() {
  angular.module('sapify-angular', ['btford.socket-io']).factory('socket', function(socketFactory) {
    var socket;
    socket = socketFactory();
    socket.forward('success');
    socket.forward('model');
    socket.forward('redirect');
    socket.forward('exception');
    return socket;
  });

  angular.module('sapify-angular').factory('sync', function() {
    var service, synchModel;
    synchModel = function(parent, changed) {
      var index, item, name, names, _i, _j, _len, _len1, _ref, _ref1, _results;
      names = [];
      _ref = Object.getOwnPropertyNames(parent);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        if (name.indexOf('$') !== -1) {
          continue;
        }
        if ((((_ref1 = parent[name]) != null ? _ref1.sync : void 0) != null) === true || Array.isArray(parent[name])) {
          names.push(name);
        }
      }
      if (names.length === 0) {
        return;
      }
      _results = [];
      for (_j = 0, _len1 = names.length; _j < _len1; _j++) {
        name = names[_j];
        if (Array.isArray(parent[name])) {
          _results.push((function() {
            var _k, _len2, _ref2, _results1;
            _ref2 = parent[name];
            _results1 = [];
            for (index = _k = 0, _len2 = _ref2.length; _k < _len2; index = ++_k) {
              item = _ref2[index];
              synchModel(parent[name][index], changed);
              if (changed._id === item._id) {
                _results1.push(parent[name][index] = changed);
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          })());
        } else {
          synchModel(parent[name], changed);
          if (changed._id === parent[name]._id) {
            _results.push(parent[name] = changed);
          } else {
            _results.push(void 0);
          }
        }
      }
      return _results;
    };
    service = {};
    service.watch = function(scope) {
      return scope.$on('model-changed', function(event, args) {
        return synchModel(scope, args.item);
      });
    };
    return service;
  });

  angular.module('sapify-angular').factory('proxy', function($q, $log, $rootScope, $window, socket, model) {
    var callbacks, component, currentId, fn, getId, getParams, listener, method, sendRequest, setSync, source, _i, _j, _len, _len1, _ref, _ref1;
    callbacks = {};
    currentId = 0;
    $rootScope.$on('socket:success', function(event, payload) {
      $log.info(payload);
      return listener(payload);
    });
    $rootScope.$on('socket:model', function(event, payload) {
      return $rootScope.$broadcast('model-changed', setSync(payload));
    });
    $rootScope.$on('socket:exception', function(event, payload) {
      return $log.error(payload);
    });
    $rootScope.$on('socket:redirect', function(event, payload) {
      var cookie, _i, _len, _ref;
      console.log('cookies', payload.cookies);
      _ref = payload.cookies;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cookie = _ref[_i];
        $window.document.cookie = cookie;
      }
      return $window.location.href = payload.url;
    });
    getId = function() {
      currentId += 1;
      if (currentId > 10000) {
        currentId = 0;
      }
      return currentId;
    };
    setSync = function(p) {
      var index, item, name, _i, _j, _len, _len1, _ref, _ref1;
      if (p == null) {
        return;
      }
      p.sync = true;
      _ref = Object.getOwnPropertyNames(p);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        if (Array.isArray(p[name])) {
          _ref1 = p[name];
          for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
            item = _ref1[index];
            p[name][index] = setSync(item);
          }
        } else if (p[name] === Object(p[name])) {
          setSync(p[name]);
        }
      }
      return p;
    };
    listener = function(payload) {
      var id;
      id = payload.id;
      if (callbacks.hasOwnProperty(id)) {
        setSync(payload.data);
        $rootScope.$apply(callbacks[id].resolve(payload.data));
        return delete callbacks[id];
      }
    };
    sendRequest = (function(_this) {
      return function(method, args) {
        var defer, id, params;
        defer = $q.defer();
        id = getId();
        params = getParams(args);
        callbacks[id] = defer;
        socket.emit('*', {
          id: id,
          socketId: $rootScope.socketId,
          method: method,
          params: params
        });
        return defer.promise;
      };
    })(this);
    getParams = function(args) {
      var index, name, names, params, _i, _len;
      names = angular.injector.$$annotate(args.callee);
      params = {};
      for (index = _i = 0, _len = names.length; _i < _len; index = ++_i) {
        name = names[index];
        params[name] = args[index];
      }
      return params;
    };
    _ref = Object.getOwnPropertyNames(model);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      component = _ref[_i];
      _ref1 = Object.getOwnPropertyNames(model[component]);
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        fn = _ref1[_j];
        method = component + "." + fn;
        source = model[component][fn].toString();
        source = source.replace('function (', "function " + fn + " (").replace('{}', "{return sendRequest('" + method + "', arguments);}");
        eval(source);
        model[component][fn] = eval(fn);
      }
    }
    return model;
  });

  angular.module('sapify-angular').config(function($stateProvider) {
    return $stateProvider.state('sapify', {
      url: '/sapify/sso/verified/:state/:usertoken',
      data: {
        requiresSSO: false
      },
      controller: function($rootScope, $state) {
        $rootScope.usertoken = $state.params.usertoken;
        return $state.go($state.params.state);
      }
    });
  });

  angular.module('sapify-angular').run(function($rootScope, $location, socket) {
    return $rootScope.$on('$stateChangeStart', function(event, toState, toParams) {
      var key, returnUrl, _ref;
      if (!((_ref = toState.data) != null ? _ref.requiresSSO : void 0) || ($rootScope.usertoken != null)) {
        return;
      }
      event.preventDefault();
      key = Math.round(Math.random() * 100000);
      returnUrl = ($location.protocol()) + "://" + ($location.host()) + ":" + ($location.port()) + "/#/sapify/sso/verified";
      return socket.emit('authenticate', {
        returnUrl: returnUrl,
        state: toState.name,
        isSecure: $location.protocol() === 'https'
      });
    });
  });

}).call(this);
